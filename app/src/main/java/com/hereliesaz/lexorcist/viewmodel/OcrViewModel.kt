package com.hereliesaz.lexorcist.viewmodel

import android.app.Application
import android.content.Context
import android.net.Uri
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import android.widget.Toast
import com.hereliesaz.lexorcist.data.Evidence
import com.hereliesaz.lexorcist.data.EvidenceRepository
import com.hereliesaz.lexorcist.DataParser
import com.hereliesaz.lexorcist.data.SettingsManager
import com.hereliesaz.lexorcist.service.ScriptRunner
import com.hereliesaz.lexorcist.utils.ExifUtils
import com.hereliesaz.lexorcist.utils.Result
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class OcrViewModel @Inject constructor(
    application: Application,
    private val evidenceRepository: EvidenceRepository?,
    private val settingsManager: SettingsManager?,
    private val scriptRunner: ScriptRunner?
) : AndroidViewModel(application) {

    // Placeholder for actual OCR processing and evidence creation logic
    fun performOcrOnUri(uri: Uri, context: Context, caseId: Int, parentVideoId: String?) {
        viewModelScope.launch {
            Log.d("OcrViewModel", "performOcrOnUri called for URI: $uri, caseId: $caseId, parentVideoId: $parentVideoId")
            // TODO: Implement actual OCR processing logic here.
            // 1. Perform OCR on the image at the given URI.
            // 2. Create an Evidence object with the OCR text and other details.
            // 3. Save the Evidence object using the EvidenceRepository.

            val ocrText = "Example OCR text from image $uri"
            val entities = DataParser.tagData(ocrText)
            val documentDate = ExifUtils.getExifDate(context, uri) ?: DataParser.parseDates(ocrText).firstOrNull() ?: System.currentTimeMillis()
            var newEvidence = Evidence(
                id = 0, // Or generated by repository
                caseId = caseId.toLong(),
                spreadsheetId = "", // This needs to be determined, perhaps from the case or a default
                type = "ocr_image_text",
                content = ocrText,
                timestamp = System.currentTimeMillis(),
                sourceDocument = uri.toString(),
                documentDate = documentDate, // Or from image metadata if available
                allegationId = null,
                category = "OCR Image",
                tags = listOf("ocr", "video_frame"),
                commentary = null,
                parentVideoId = parentVideoId,
                entities = entities
            )
            val script = settingsManager?.getScript()
            if (script != null && scriptRunner != null) {
                val result = scriptRunner.runScript(script, newEvidence)
                if (result is Result.Success) {
                    newEvidence = newEvidence.copy(tags = newEvidence.tags + result.data.tags)
                } else if (result is Result.Error) {
                    Toast.makeText(getApplication(), "Script error: ${result.exception.message}", Toast.LENGTH_LONG).show()
                }
            }
            // evidenceRepository?.addEvidence(newEvidence)
        }
    }

    // ... any other existing code in your OcrViewModel
}
