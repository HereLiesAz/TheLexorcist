package com.hereliesaz.lexorcist\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.hereliesaz.lexorcist.components.AppNavRail\nimport com.hereliesaz.lexorcist.ui.*\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.ui.platform.LocalContext\nimport com.hereliesaz.lexorcist.viewmodel.AuthViewModel\nimport com.hereliesaz.lexorcist.viewmodel.CaseViewModel\nimport com.hereliesaz.lexorcist.viewmodel.EvidenceViewModel\nimport com.hereliesaz.lexorcist.viewmodel.OcrViewModel\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport com.hereliesaz.lexorcist.viewmodel.EvidenceDetailsViewModel\nimport com.hereliesaz.lexorcist.viewmodel.MainViewModel\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainScreen(\n    navController: NavHostController,\n    authViewModel: AuthViewModel = viewModel(),\n    caseViewModel: CaseViewModel = viewModel(),\n    evidenceViewModel: EvidenceViewModel = viewModel(),\n    evidenceDetailsViewModel: EvidenceDetailsViewModel = viewModel(),\n    ocrViewModel: OcrViewModel = viewModel(),\n    mainViewModel: MainViewModel = viewModel(),\n    onSignInClick: () -> Unit,\n    onSignOutClick: () -> Unit,\n) {\n    val isSignedIn by authViewModel.isSignedIn.collectAsState()\n    val selectedCase by caseViewModel.selectedCase.collectAsState()\n    val errorMessage by caseViewModel.errorMessage.collectAsState()\n    val snackbarHostState = remember { SnackbarHostState() }\n    var showCreateCaseDialog by remember { mutableStateOf(false) }\n\n    LaunchedEffect(errorMessage) {\n        errorMessage?.let {\n            snackbarHostState.showSnackbar(it)\n            caseViewModel.clearError()\n        }\n    }\n\n    Scaffold(\n        snackbarHost = { SnackbarHost(snackbarHostState) }\n    ) { paddingValues ->\n        if (isSignedIn) {\n            Row(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n            ) {\n                AppNavRail(onNavigate = { screen -> navController.navigate(screen) })\n                Box(modifier = Modifier.weight(1f)) {\n                    NavHost(navController = navController, startDestination = \"home\") {\n                        composable(\"home\") { AuthenticatedView(onCreateCase = { showCreateCaseDialog = true }) }\n                        composable(\"cases\") { CasesScreen(caseViewModel = caseViewModel) }\n                        composable(\"add_evidence\") {\n                            AddEvidenceScreen(\n                                onAddTextEvidence = { navController.navigate(\"add_text_evidence\") },\n                            )\n                        }\n                        composable(\"add_text_evidence\") {\n                            AddTextEvidenceScreen(\n                                evidenceViewModel = evidenceViewModel,\n                                onSave = { text ->\n                                    selectedCase?.let { case ->\n                                        evidenceViewModel.addTextEvidence(\n                                            text = text,\n                                            caseId = case.id.toLong(),\n                                            spreadsheetId = case.spreadsheetId\n                                        )\n                                    }\n                                    navController.navigateUp()\n                                }\n                            )\n                        }\n                        composable(\"timeline\") {\n                            selectedCase?.let {\n                                TimelineScreen(\n                                    case = it,\n                                    evidenceViewModel = evidenceViewModel,\n                                    navController = navController\n                                )\n                            }\n                        }\n                        composable(\"data_review\") { DataReviewScreen(evidenceViewModel = evidenceViewModel) }\n                        composable(\"settings\") { SettingsScreen(caseViewModel = caseViewModel) }\n                        composable(\"evidence_details/{evidenceId}\") { backStackEntry ->\n                            val evidenceIdString = backStackEntry.arguments?.getString(\"evidenceId\")\n                            val evidenceId = remember(evidenceIdString) { evidenceIdString?.toIntOrNull() }\n\n                            if (evidenceId != null) {\n                                LaunchedEffect(evidenceId) {\n                                    evidenceViewModel.loadEvidenceDetails(evidenceId)\n                                }\n\n                                val evidence by evidenceViewModel.selectedEvidenceDetails.collectAsState()\n\n                                evidence?.let {\ ev ->\n                                    EvidenceDetailsScreen(\n                                        evidence = ev,\n                                        viewModel = evidenceViewModel\n                                    )\n                                }\n\n                                DisposableEffect(Unit) {\n                                    onDispose {\n                                        evidenceViewModel.clearEvidenceDetails()\n                                    }\n                                }\n                            } else {\n                                // Handle invalid or missing evidenceId, e.g., show an error or navigate back\n                                Text(\"Error: Evidence ID not found or invalid.\")\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n                    .padding(16.dp),\n                horizontalAlignment = Alignment.End,\n                verticalArrangement = Arrangement.Center\n            ) {\n                Button(onClick = onSignInClick) {\n                    Text(stringResource(R.string.sign_in_with_google))\n                }\n            }\n        }\n\n        if (showCreateCaseDialog) {\n            CreateCaseDialog(\n                caseViewModel = caseViewModel,\n                onDismiss = { showCreateCaseDialog = false }\n            )\n        }\n    }\n}\n\n@Composable\nfun AuthenticatedView(\n    onCreateCase: () -> Unit\n) {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\n            text = stringResource(R.string.app_name),\n            style = MaterialTheme.typography.headlineMedium,\n            modifier = Modifier.padding(bottom = 16.dp)\n        )\n        Text(\n            text = stringResource(R.string.use_navigation_rail),\n            style = MaterialTheme.typography.bodyLarge\n        )\n        Text(\n            text = stringResource(R.string.tap_icon_to_open_menu),\n            style = MaterialTheme.typography.bodyLarge,\n            modifier = Modifier.padding(bottom = 32.dp)\n        )\n        Button(onClick = onCreateCase) {\n            Text(stringResource(R.string.create_new_case))\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun CreateCaseDialog(\n    caseViewModel: CaseViewModel,\n    onDismiss: () -> Unit\n) {\n    val context = LocalContext.current\n    var caseName by remember { mutableStateOf(\"\") }\n    var exhibitSheetName by remember { mutableStateOf(\"\") }\n    var caseNumber by remember { mutableStateOf(\"\") }\n    var caseSection by remember { mutableStateOf(\"\") }\n    var caseJudge by remember { mutableStateOf(\"\") }\n\n    AlertDialog(\n        onDismissRequest = onDismiss,\n        title = { Text(stringResource(R.string.create_new_case)) },\n        text = {\n            Column(\n                modifier = Modifier.verticalScroll(rememberScrollState()),\n                verticalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                TextField(\n                    value = caseName,\n                    onValueChange = { caseName = it },\n                    label = { Text(stringResource(R.string.case_name_required)) },\n                    isError = caseName.isBlank()\n                )\n                TextField(\n                    value = exhibitSheetName,\n                    onValueChange = { exhibitSheetName = it },\n                    label = { Text(stringResource(R.string.exhibit_sheet_name)) }\n                )\n                TextField(\n                    value = caseNumber,\n                    onValueChange = { caseNumber = it },\n                    label = { Text(stringResource(R.string.case_number)) }\n                )\n                TextField(\n                    value = caseSection,\n                    onValueChange = { caseSection = it },\n                    label = { Text(stringResource(R.string.case_section)) }\n                )\n                TextField(\n                    value = caseJudge,\n                    onValueChange = { caseJudge = it },\n                    label = { Text(stringResource(R.string.judge)) }\n                )\n            }\n        },\n        confirmButton = {\n            Button(\n                onClick = {\n                    if (caseName.isNotBlank()) {\n                        caseViewModel.createCase(\n                            caseName = caseName,\n                            exhibitSheetName = exhibitSheetName.ifBlank { context.getString(R.string.default_exhibit_sheet_name) },\n                            caseNumber = caseNumber,\n                            caseSection = caseSection,\n                            caseJudge = caseJudge\n                        )\n                        onDismiss()\n                    }\n                },\n                enabled = caseName.isNotBlank()\n            ) {\n                Text(stringResource(R.string.create))\n            }\n        },\n        dismissButton = {\n            Button(onClick = onDismiss) {\n                Text(stringResource(R.string.cancel))\n            }\n        }\n    )\n}\n