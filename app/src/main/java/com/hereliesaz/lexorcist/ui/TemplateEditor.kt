package com.hereliesaz.lexorcist.ui

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import com.hereliesaz.aznavrail.AzButton
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.hereliesaz.lexorcist.model.Template

@Composable
fun TemplateEditor(
    template: Template?,
    onSave: (Template) -> Unit,
    onDismiss: () -> Unit,
) {
    var name by remember { mutableStateOf(template?.name ?: "") }
    var description by remember { mutableStateOf(template?.description ?: "") }
    var content by remember { mutableStateOf(template?.content ?: "") }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(if (template == null) "Create Template" else "Edit Template") },
        text = {
            Column {
                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("Name") },
                )
                Spacer(modifier = Modifier.height(8.dp))
                OutlinedTextField(
                    value = description,
                    onValueChange = { description = it },
                    label = { Text("Description") },
                )
                Spacer(modifier = Modifier.height(8.dp))
                OutlinedTextField(
                    value = content,
                    onValueChange = { content = it },
                    label = { Text("Content") },
                    modifier = Modifier.height(200.dp),
                )
            }
        },
        confirmButton = {
            AzButton(
                onClick = {
                    val newTemplate =
                        template?.copy(
                            name = name,
                            description = description,
                            content = content,
                            // authorName and authorEmail are part of the Template data class
                            // but are typically set when sharing, not in this local editor.
                            // If template is not null, its existing author details are preserved.
                        ) ?: Template(
                            id = "", // Will be generated by the server/repository
                            name = name,
                            description = description,
                            content = content,
                            authorName = "", // Placeholder, to be set by sharing logic
                            authorEmail = "", // Placeholder, to be set by sharing logic
                            court = null // Placeholder, to be set by sharing logic
                            // rating and numRatings use default values
                        )
                    onSave(newTemplate)
                },
                text = "Save"
            )
        },
        dismissButton = {
            AzButton(onClick = onDismiss, text = "Cancel")
        },
    )
}
