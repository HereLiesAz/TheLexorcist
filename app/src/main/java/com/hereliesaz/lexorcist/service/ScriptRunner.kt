package com.hereliesaz.lexorcist.service

// Removed import for android.content.Context as it was unused after Context disambiguation
// import com.google.api.client.json.webtoken.JsonWebSignature // No longer returning this type
import com.hereliesaz.lexorcist.model.Evidence
import org.mozilla.javascript.Scriptable
import org.mozilla.javascript.ScriptableObject

class ScriptRunner {

    // This class is intended to be populated by the JavaScript executed via Rhino.
    // The JavaScript should be able to access and modify its properties.
    class Parser {
        // Property to hold tags extracted or generated by the script.
        // Making it a var and mutable allows the script to modify it.
        var tags: MutableList<String> = mutableListOf()
        // You can add other properties here that your script might populate.
    }

    fun runScript(script: String, evidence: Evidence): Parser { // Changed return type
        val rhino = org.mozilla.javascript.Context.enter()
        rhino.optimizationLevel = -1 // Required for Android
        try {
            val scope: Scriptable = rhino.initStandardObjects()
            
            // Create an instance of our custom Parser class
            val customParserInstance = Parser() 

            // Expose the Evidence object to the script as 'evidence'
            ScriptableObject.putProperty(scope, "evidence", org.mozilla.javascript.Context.javaToJS(evidence, scope))
            // Expose our custom Parser instance to the script as 'parser'
            // The script will interact with this 'parser' object to set tags or other data.
            ScriptableObject.putProperty(scope, "parser", org.mozilla.javascript.Context.javaToJS(customParserInstance, scope))
            
            rhino.evaluateString(scope, script, "JavaScript<MainViewModel>", 1, null)
            
            // Return the instance of our Parser, which should have been populated by the script.
            return customParserInstance
        } finally {
            org.mozilla.javascript.Context.exit()
        }
    }
}
