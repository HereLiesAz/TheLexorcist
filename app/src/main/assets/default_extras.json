{
  "scripts": [
    {
      "name": "1. Profanity Tagger",
      "author": "Az",
      "description": "A simple script to tag any evidence containing common curse words. Useful for establishing a general tone of communication.",
      "content": "const curses = [\"f***\", \"s***\", \"b****\", \"a******\"];\nconst text = evidence.text.toLowerCase();\nif (curses.some(word => text.includes(word))) {\n    addTag(\"Profanity\");\n}"
    },
    {
      "name": "59. Identify the \"Most Persuasive\" Evidence",
      "author": "Az",
      "description": "An AI ranks all evidence in the spreadsheet based on relevance, admissibility, and impact, then creates a \"Top5Evidence\" sheet with links to these key pieces.",
      "content": "Spreadsheet.createSheet(\"Top5Evidence\");\nconst allEvidence = Spreadsheet.query(\"Evidence\", \"SELECT *\");\nconst rankings = AI.analyze(\"PersuasivenessRanker\", { evidence: allEvidence, allegations: case.allegations });\nrankings.slice(0, 5).forEach(item => {\n    Spreadsheet.appendRow(\"Top5Evidence\", { \"EvidenceID\": item.id, \"Rank\": item.rank, \"Reason\": item.reason });\n});"
    },
    {
      "name": "60. AI-Powered Spreadsheet Query via Natural Language",
      "author": "Az",
      "description": "A user writes a question in a \"Queries\" sheet. The script sends it to an AI that converts it into a formal query, executes it, and pastes the results into the sheet.",
      "content": "const newQueries = Spreadsheet.query(\"Queries\", \"SELECT * WHERE Result IS NULL\");\nnewQueries.forEach(query => {\n    const formalQuery = AI.analyze(\"NLQtoSQL\", { question: query.Question });\n    try {\n        const results = Spreadsheet.query(formalQuery.sheet, formalQuery.sql);\n        const resultsAsText = JSON.stringify(results, null, 2);\n        Spreadsheet.updateCell(\"Queries\", `B${query.rowNumber}`, resultsAsText);\n    } catch (e) {\n        Spreadsheet.updateCell(\"Queries\", `B${query.rowNumber}`, `Error: ${e.message}`);\n    }\n});"
    },
    {
      "name": "61. Semantic Gaslighting Detector (Functional)",
      "author": "Az",
      "description": "This script uses semantic similarity to detect phrases that are variations of gaslighting, even if they don't use the exact keywords from a predefined list.",
      "content": "const gaslightingExamples = [\n    \"You are being irrational and overly emotional.\",\n    \"That is not what happened, you are remembering it wrong.\",\n    \"I was just joking, you are too sensitive.\",\n    \"You are making a big deal out of nothing.\",\n    \"I am sorry you feel that way.\"\n];\nconst evidenceText = evidence.text;\nlet isGaslighting = false;\ngaslightingExamples.forEach(example => {\n    if (lex.ai.local.calculateSimilarity(evidenceText, example) > 0.7) {\n        isGaslighting = true;\n    }\n});\nif (isGaslighting) {\n    addTag(\"Gaslighting (Semantic)\");\n    linkToAllegation(\"Emotional Abuse\");\n}"
    },
    {
      "name": "62. Simple Tutorial: \"Hello, Dynamic Screens!\"",
      "author": "Az",
      "description": "This script demonstrates the most basic use of the `lex.ui` object. It creates a new, clickable menu item in the main navigation rail. When you click this item, it opens a brand new screen that is completely defined by a JSON schema within the script.",
      "content": "const myScreenSchema = {\n  title: \"Hello World\",\n  elements: [\n    { type: \"text\", properties: { text: \"Welcome to your first scripted screen!\", size: 20 } },\n    { type: \"spacer\", properties: { height: 16 } },\n    { type: \"button\", properties: { label: \"Say Hello\", onClickAction: \"show_toast:Hello from a scripted button!\" } }\n  ]\n};\nlex.ui.addOrUpdate(\"my_first_screen_button\", \"My Screen\", true, \"scripted_screen/\" + JSON.stringify(myScreenSchema));"
    },
    {
      "name": "63. Advanced Tutorial: AI-Powered In-App Guide",
      "author": "Az",
      "description": "This script demonstrates combining the AI and UI APIs. It creates a \"Tutorial & Tip\" menu item that opens a custom screen featuring a \"Tip of the Day\" freshly generated by the AI.",
      "content": "const tipPrompt = \"In one sentence, give me a useful and uncommon productivity tip for legal professionals.\";\n// Note: This uses the cloud-based generative AI, not the local one.\nconst aiGeneratedTip = lex.ai.generate.generateContent(tipPrompt);\nconst tutorialSchema = {\n  title: \"App Tutorial\",\n  elements: [\n    { type: \"text\", properties: { text: \"Welcome to The Lexorcist!\", size: 24 } },\n    { type: \"text\", properties: { text: \"This app helps you organize, analyze, and build your case narrative.\", size: 16 } },\n    { type: \"spacer\", properties: { height: 24 } },\n    { type: \"text\", properties: { text: \"AI Tip of the Day:\", size: 20 } },\n    { type: \"text\", properties: { text: aiGeneratedTip, size: 16 } },\n    { type: \"spacer\", properties: { height: 24 } },\n    { type: \"text\", properties: { text: \"Use the navigation rail on the left to manage Cases, Evidence, and more.\", size: 16 } }\n  ]\n};\nlex.ui.addOrUpdate(\"ai_tutorial_screen_button\", \"Tutorial & Tip\", true, \"scripted_screen/\" + JSON.stringify(tutorialSchema));"
    }
  ],
  "templates": []
}
